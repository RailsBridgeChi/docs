goals {

  message <<-MARKDOWN
  Now that the structure is complete, let's make the flow work smoothly.

  Currently when you go to <http://localhost:3000> you see the "Welcome aboard" message.

  It would be easier to use our app if <http://localhost:3000> went directly to the dogs list.

  In this step we'll make that happen and learn a bit about routes in Rails.
  MARKDOWN
}

steps {

  step "Add a root route" do
    message "Open the file `config/routes.rb` in an editor."

    message "Search the file for **root**, it should be near the top if you are using Rails 4."

    message "Uncomment the line that contains the example command by removing the `#` sign in front of it, and change it to read `root 'dogs#index'`. When you are done the line should look like this:"

    source_code :ruby, <<-RUBY
root 'dogs#index'
    RUBY

    em do
      message "(Rails 3.x users should add `root to: 'dogs#index'` and will need to remove their `public/index.html` file)."
    end
  end

  step "Confirm your changes" do
    message "Go back to <http://localhost:3000/>. You should be taken to the dogs list automatically."
  end
}

explanation {

 message <<-MARKDOWN
  * `root 'dogs#index'` is a Rails route that says the default
    address for your site is `dogs#index`. `dogs#index` is the dogs
    list page (the dogs controller with the index action).
  * Rails routes control how URLs (web addresses) get matched with
    code on the server. Similar to how addresses match with houses and
    apartments.
  * The file `config/routes.rb` is like an address directory listing the
    possible addresses and which code goes with each one
  * `routes.rb` uses some shortcuts so it doesn't always show all the
    possible URLs. To explore the URLs in more detail we can use the
    terminal.

  At the terminal type `rake routes`. You should get something that
  looks like this:

  ````
    $ rake routes

        Prefix Verb   URI Pattern                Controller#Action
        dogs GET    /dogs(.:format)          dogs#index
               POST   /dogs(.:format)          dogs#create
     new_dog GET    /dogs/new(.:format)      dogs#new
    edit_dog GET    /dogs/:id/edit(.:format) dogs#edit
         dog GET    /dogs/:id(.:format)      dogs#show
               PATCH  /dogs/:id(.:format)      dogs#update
               PUT    /dogs/:id(.:format)      dogs#update
               DELETE /dogs/:id(.:format)      dogs#destroy
          root GET    /                          dogs#index
  ````
  This shows all the URLs your application responds to. The code that starts with colons are variables so :id means the id number of the record. The code in parenthesis is optional.

  In Rails 4, you can also get this information on your site in development. Go to <a href="http://localhost:3000/rails/info">http://localhost:3000/rails/info</a> and you'll see something like this:

  <img src='img/rails4_rails_info_routing.png' alt='Screenshot of browser-based Rails routing info page'>

  You'll also see that table in Rails 4 whenever you try to access an invalid route (try <a href="http://localhost:3000/sandwich">http://localhost:3000/sandwich</a>)

### Exploring Routes (optional)

  Now you can have a look at the paths that are available in your app.
  Let's try looking at one of the dogs routes we just generated.
  Open up your Rails console and play:

    $ rails console
    >> app.dogs_path
    => "/dogs"
    >> app.dogs_url
    => "http://www.example.com/dogs"

  `app` is a special object that represents your entire application.
  You can ask it about its routes (as we just did), play with its
  database connections, or make pseudo-web requests against it with
  `get` or `post` (and lots more).

  MARKDOWN
}

message "Next, let's put your application on the real internet!"

next_step "deploying_to_heroku"
