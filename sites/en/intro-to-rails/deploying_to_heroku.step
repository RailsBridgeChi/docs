goals do
  goal "Deploy your application to Heroku so you and your friends can keep a dog list on the internet."
end

h2 do
  span "If you haven't yet deployed to Heroku, start at "
  a 'First-time setup', href: '#first-time'
  span ". Otherwise, start at "
  a 'Every time', href: '#every-time'
  span "."
end

a name: 'first-time'
situation "First-time setup" do
  step "Create a Heroku application" do
    console "heroku create"
    message "`heroku create` registers a new application on Heroku's system. You should see some output including your new app's URL."
  end

  step "Edit the Gemfile" do
    important "Each application has its own `Gemfile`. Be sure you're opening the one inside your app's folder."

    message "Heroku will run our application slightly differently than our development computer does, which requires us to make a small change to our `Gemfile`."

    message "Open the file called `Gemfile` in Sublime Text, or your preferred editor, and find the line containing:"

    source_code :ruby, <<-RUBY
gem 'sqlite3'
    RUBY

    message "**Remove that line** and replace it with:"

    message "```ruby
group :development, :test do
  gem 'sqlite3'
end

group :production do
  gem 'pg'
  gem 'rails_12factor'
end
``` "

    explanation do
      message "The `Gemfile` manages our dependencies on other people's code and libraries. `group :development, :test` means these gems will only be used in your development/test environments (in this case, your local machine). `group :production` means these gems will only be used in your production environment (in this case, Heroku).

 `sqlite` and `pg` are two different kinds of database software. Heroku only supports `pg`, which is why you need to make this change; this is a Heroku-specific quirk. Rails tries to be database-agnostic, so most of the time you won't even need to know what kind of database you're using."

 info "You may have heard of or even worked with MySQL, especially if you've done some programming before -- MySQL is a database software just like `sqlite` and `pg`, and it's pretty common. Generally, you can use MySQL with Rails; but today, we're just working with `sqlite` and `pg`."

  end
  step "Apply the Gemfile changes" do
    console "bundle install --without production"
    message "Every time the `Gemfile` changes, you need to run ``bundle install`` for the changes to be processed. The processed version of the changes is stored in another file called ``Gemfile.lock``."
  end

  step "Commit the Gemfile changes" do
    message "There are now changes to `Gemfile` and `Gemfile.lock` that need to be committed before we can push to Heroku."
    console <<-SHELL
git add .
git commit -m "Changed Gemfile for Heroku"
    SHELL
    tip "There is a period after the word add in the first line."
       explanation do
         message "Git is back! You are updating your git repository with your gemfile changes. This is important to do before the next step, because the state of your git repository will be the state of your heroku project."
       end
  end
end


a name: 'every-time'
situation "Every time" do
  step "Commit any pending changes to git" do
    message "Heroku will only receive the files we've committed into our local git repository. So we need to make sure all changed files have been committed."
    console "git status"
    message "`git status` shows you any pending changes you've created. If it has no output, you're already ready to deploy! Otherwise..."

    console <<-SHELL
git add .
git commit -m "Some helpful message for your future self"
    SHELL
    message "Your commit message should reference whatever your outstanding
changes are: something like \"Added ages to dogs\"."
  end

  step "Push changes to Heroku" do
    console "git push heroku master"
    message "This takes all changes you've committed locally and pushes them to Heroku."
       explanation do
       message "`git push` sends a copy of your git history and your code somewhere else -- in this case, the Heroku servers.

 `heroku` here is the name of the place to send the code. `master` is the name of the branch -- `master` is the default when you have only one git branch, and multiple branches are beyond today's project.

 Usually `git push` just sends a copy of the code; Heroku does something extra, by deploying the code and running it on a webserver every time you push a new version.
"
  end
  end
  step "Run database migrations on Heroku" do
    console "heroku run rake db:migrate"
    message "This tells Heroku to run your migrations on its database, like
running `rake db:migrate` locally."
    message "Heroku's database is separate from the one on your computer, which
means it needs to be updated every time you make changes to the structure of
your database."
    message "It also means that you won't see any of the data you entered into
the `sqlite3` database on your computer."
  end

  step "Visit your application" do
    console "heroku open"
    message "This opens the new application in your browser."
explanation do



       message "This opens up a browser window showing your real, live app on the real, live internet!

 You may notice that there are no dogs here, even if you added dogs on your local copy. This is because the Heroku copy of your app has a separate database from your local project. They run on the same code, but have their own databases.

 Try adding/removing some dogs on Heroku and on your local machine; then compare your Heroku dogs to your local dogs. The two instances of your app show a totally different set of dogs, even though they use the same code to store and display them.

Make sure that you can visualize how the contents of the database are different from the code running the application.
 "
end
  end
end

  message "You should be able to deploy your application any time it's in a good, working state. Your typical workflow will look like:"
  img src: "img/workflow.png", alt: "Diagram showing git workflow of making changes, committing them, and pushing to Heroku.", style: "border: none"
  ol do
    li { message "Add or change some code" }
    li { message "Commit your changes (`git commit`)" }
    li { message "(repeat)" }
  end
  message "Any time your changes are committed, you should feel free to `git push heroku master` and boom! Your changes are live!"


  message "Now would be a good time to take a stretching break; also, you can send your Heroku url to your friends, who can add their own dogs to your database and marvel at this cool thing you made!"

next_step 'datatypes'
