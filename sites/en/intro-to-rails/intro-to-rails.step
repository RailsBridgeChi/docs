message <<-MARKDOWN
### Goal

Today, we're going to learn the basics of creating and interacting with a database using the Rails framework and the Ruby language. A database is a way of storing structured information in a computer; usually, a database is organized into tables, where each table represents a kind of thing, each row represents an instance of that thing,

For now, we're just going to create one table, so we're just going to have one type of thing in our database. Choose a type of thing that your database will focus on. During this step, you will create a database that will store a list of things, and you will be able to view and edit your list of things on a webpage. You can work with the example scenario, any of the alternative scenarios, or any scenario you’d like to make up where having a list of things would be useful.

EXAMPLE SCENARIO: You are making a list of adoptable dogs for an animal shelter. 

ALTERNATIVE SCENARIOS: You are making a list of cities to consider relocating to; you are making a list of staff in your office; you are making a list of records in your record collection.

If you want to be able to use the exact code from these instructions or from our example on GitHub, use the example scenario and create a list of dogs. If you’re up for a bit more challenge, use whatever scenario you’d like -- just make sure to use the right table and file names for your choice. E.g. for the animal shelter example, our table is named “dogs”; for the city example, you would use the same code but replace “dog/dogs” with “city/cities”.


### Before you get started, make sure you have everything installed correctly.
Everything should be set up the night before during our
install-fest. Please ensure you have everything working _before_ you
show up for RailsBridge on Saturday. *If you do not have an installation sticker by Saturday morning, you may not be able to participate.*

<a href='http://curriculum.railsbridge.org/installfest/get_a_sticker'>Check your installation here.</a>


insert 'working_effectively_and_efficiently'

message <<-MARKDOWN
### Format

Each lesson will look like this:

<div style="background: white; border: 1px solid black; padding-left: 4em;">
  <h1 class="doc_title" style="margin-top: 0em;">Step Title</h1>
  <div class="goals">
    <h1>Goal:</h1>
    <p>Description of the current step.
    <p>Red because big goals are scary.
  </div>
  <div class="steps">
    <h1>Steps:</h1>
    <pre class="term">steps to take.</pre>
    <div class="console">
      <pre>
def code_to_write
  1 + 1
end</pre>
    </div>
    <p>Yellow because we've gotten it done, but we have no clue what's going on.
  </div>
  <div class="explanation">
    <h1>Explanation</h1>
    <p>Details of what the steps actually did... spell out the cause and effect.
    <p>Green because we can tie everything together now.
  </div>
</div>
MARKDOWN

next_step "ruby_language"
