goals do
goal "You would like to be able to sort dogs by breed &mdash; but you don't want to just add a `breed` field as a string. You want `breeds` to be first-class resources in your app &mdash; you want to be able to store information about the breed in a `breeds` table, just like you stored information about dogs in your `dogs` table."
goal "For this, you will learn how to add a second table, and how to create an *association* between two tables."
end

steps do
step do
  message "Let's add a new table to our application! So far you have just one table, _dogs_."
  console "rails g scaffold breeds name:string description:text"
  explanation do
    message "Just like when you created the `dogs` table at the beginning of this project -- the scaffold generation here created views, models, and controllers for you. 

It also generated a migration that will add this table to the database for you with the fields you specified."
  end
end
step do
message  "Run the migration."
console "bundle exec rake db:migrate"
tip "Remember to start your rails server if it's not already running."
message "Now you should be able to visit `localhost:3000/breeds` and add some breeds and their descriptions. Clicking 'Show' next to a breed on the `/breeds` page should take you to the breed's *view*, where you can see its name and description."
explanation do
  message "This process should be familiar and you should remember all the steps from earlier -- so far, setting up breeds via scaffolding has worked exactly the same as setting up dogs via scaffolding."
end
end
step do
  message "So now you have breeds set up, but you don't have a connection between breeds and dogs. The next step is to *associate* the breeds and dogs tables."
  message "For now, you will use a *one-to-many* relation."
  message "Enter the `/app/models/dog.rb` file and, under the line `class Dog < ActiveRecord::Base`, add: "
message "```ruby
belongs_to :breed
```
"
message "Next, edit the `/app/models/breed.rb` file, and, under the line `class Breed < ActiveRecord::Base`, add: "
message "```ruby
has_many :dogs
```"
explanation do
  message "Adding these lines to `breed.rb` and `dog.rb` tells your application about the relationship between these two things. Now the application knows that each dog can be associated with one breed, and each breed can have many dogs associated with it."
end
end
step do
  message "You will need to add a place for your database to store this information."
  console "rails g migration AddBreedIdToDogs breed_id:integer"
  console "rake db:migrate"
  explanation do
    message "The `breed_id` here is called a *foreign key*. For a one-to-many relationship, you only need to put the foreign key in one of your tables. Put the key in the table that `belongs_to` the other association. Each `breed` `has_many` `dogs`, and each `dog` has one unique `breed_id`, so you need to add `breed_id` to the `dogs` table in order to store this relationship.
    Now, each `dog` can find its breed via the `breed_id` stored in its table &mdash; and each `breed` can find the `dogs` associated with it by looking for their matching `breed_id`.
"
  end
end
step do
  message "Open `/app/views/dogs/_form.html.erb` and add:"
  message "```erb
  <div class='field'>
    <%= f.collection_select(:breed_id, Breed.all, :id, :name) %>
  </div>
```"
  message "Open `/app/controllers/dogs_controller.rb` and change your `dog_params` method to include `:breed`:"
  message  "```ruby
    def dog_params
      params.require(:dog).permit(:name, :age, :picture, :breed_id)
    end
```"
  tip "Don't forget to keep any fields you added earlier in `dog_params`, if your `dogs` have other attributes like `description` or `birthdate`."
  message "Open `/app/views/dogs/index.html.erb` and add:"
  message "```html
<th>Breed</th>
```"
  message "after"
  message "```html
<th>Age</th>
```"
  message "and"
  message "```erb
 <td><%= dog.breed.try(:name) %></td>
```"
  message "after"
  message "```erb
 <td><%= dog.age %></td>
```"
  tip "Adding `.try` means that you won't get an error if any of your dogs' `breed` is nil -- which it will be for all of them, at first."
  explanation do
    message "This should remind you of the process of adding fields like `age` to your `dogs`! That process also involved adding a field to the form, adding a new permitted parameter in the controller, and adding a field to the display. Once you've completed this step, you should be able to edit your `dogs` to add breeds, and then see those breeds displayed in the main list. "
  end
end
step do
  message  "Next, you want to let the shelter visitors browse dogs by the breed they would like. 

There are many possible ways of doing this; outlined here are the steps for using a list of links on the index page, which is similar to what you did in the 'Sorting' lesson.

If you're feeling up for more challenge, see if you can use a different approach to allow people to view all the dogs in a breed &mdash; maybe by showing all the dogs in a breed on the breed's `show` page, or maybe by grouping the dogs on the `index` page by breed, or "
  message "Open `/app/views/dogs/index.html`" 
  message "```erb
 <% Breed.all.each do |b| %>
  <%= link_to b.name, dogs_path(breed_id: b.id) %>
  <% end %>
```"
  message "Edit the `index` method in `/app/controllers/dogs_controller.rb`:"
  tip "Your method may look slightly different if you skipped the 'Sorting' lesson or took a different approach there. The main change you want to make now is adding a check for the `breed_id` parameter and defining `@dogs` based on this."
  message "```ruby
  def index
    if params[:sort_by]
      @dogs = Dog.all.sort_by(&params[:sort_by].to_sym)
    elsif params[:babies]
      @dogs = Dog.all.select{|d| d.age < 5 }
    elsif params[:pictures]
      @dogs = Dog.all.select{|d| !(d.picture_url.blank?) }
    elsif params[:breed_id]
      @dogs = Breed.find(params[:breed_id]).dogs
    else
      @dogs = Dog.all
    end
  end
```"
  tip "Bonus challenge! Can you figure out how to display the breed's description when dogs are filtered by breed?"
end
end
